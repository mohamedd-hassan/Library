.text:00000000 main:
.text:00000000
.text:00000000 var_10          = -0x10
.text:00000000 var_4           = -4
.text:00000000
; prologo della funzione.
; imposta il GP:
.text:00000000                 lui     $gp, (__gnu_local_gp >> 16)
.text:00000004                 addiu   $sp, -0x20
.text:00000008                 la      $gp, (__gnu_local_gp & 0xFFFF)
; salva il RA nello stack locale:
.text:0000000C                 sw      $ra, 0x20+var_4($sp)
; salva il GP nello stack locale:
; per qualche ragione, questa istruzione non Ã¨ presente nell' output assembly di GCC:
.text:00000010                 sw      $gp, 0x20+var_10($sp)
; carica l'indirizzo della funzione puts() dal GP al \$t9:
.text:00000014                 lw      $t9, (puts & 0xFFFF)($gp)
; forma l'indirizzo della stringa di testo in \$a0:
.text:00000018                 lui     $a0, ($LC0 >> 16)  # "Hello, world!"
; salta a puts(), salvando l'indirizzo di ritorno nel link register:
.text:0000001C                 jalr    $t9
.text:00000020                 la      $a0, ($LC0 & 0xFFFF)  # "Hello, world!"
; ripristina il RA:
.text:00000024                 lw      $ra, 0x20+var_4($sp)
; copia 0 da \$zero a \$v0:
.text:00000028                 move    $v0, $zero
; ritorna saltando al RA:
.text:0000002C                 jr      $ra
; epilogo funzione:
.text:00000030                 addiu   $sp, 0x20
